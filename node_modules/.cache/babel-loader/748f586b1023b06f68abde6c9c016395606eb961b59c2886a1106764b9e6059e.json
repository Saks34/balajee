{"ast":null,"code":"router.get('/debits/:customerId', async (req, res) => {\n  try {\n    const {\n      customerId\n    } = req.params;\n\n    // Basic validation - remove mongoose validation if mongoose is not imported\n    if (!customerId) {\n      return res.status(400).json({\n        success: false,\n        message: 'Customer ID is required'\n      });\n    }\n    const debits = await Debit.find({\n      customer: customerId\n    }).sort({\n      date: -1\n    });\n    res.json({\n      success: true,\n      debits\n    });\n  } catch (error) {\n    console.error('Error fetching debits:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Error fetching debits',\n      error: error.message\n    });\n  }\n});\n\n// Admin - Get all credits for a specific customer\nrouter.get('/credits/:customerId', async (req, res) => {\n  try {\n    const {\n      customerId\n    } = req.params;\n\n    // Basic validation - remove mongoose validation if mongoose is not imported\n    if (!customerId) {\n      return res.status(400).json({\n        success: false,\n        message: 'Customer ID is required'\n      });\n    }\n    const credits = await Credit.find({\n      customer: customerId\n    }).sort({\n      date: -1\n    });\n    res.json({\n      success: true,\n      credits\n    });\n  } catch (error) {\n    console.error('Error fetching credits:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Error fetching credits',\n      error: error.message\n    });\n  }\n});","map":{"version":3,"names":["router","get","req","res","customerId","params","status","json","success","message","debits","Debit","find","customer","sort","date","error","console","credits","Credit"],"sources":["D:/balajee-khata/client/src/components/CustomerDetails.jsx"],"sourcesContent":["router.get('/debits/:customerId', async (req, res) => {\r\n  try {\r\n    const { customerId } = req.params;\r\n    \r\n    // Basic validation - remove mongoose validation if mongoose is not imported\r\n    if (!customerId) {\r\n      return res.status(400).json({ success: false, message: 'Customer ID is required' });\r\n    }\r\n    \r\n    const debits = await Debit.find({ customer: customerId })\r\n      .sort({ date: -1 });\r\n    \r\n    res.json({ success: true, debits });\r\n  } catch (error) {\r\n    console.error('Error fetching debits:', error);\r\n    res.status(500).json({ success: false, message: 'Error fetching debits', error: error.message });\r\n  }\r\n});\r\n\r\n// Admin - Get all credits for a specific customer\r\nrouter.get('/credits/:customerId', async (req, res) => {\r\n  try {\r\n    const { customerId } = req.params;\r\n    \r\n    // Basic validation - remove mongoose validation if mongoose is not imported\r\n    if (!customerId) {\r\n      return res.status(400).json({ success: false, message: 'Customer ID is required' });\r\n    }\r\n    \r\n    const credits = await Credit.find({ customer: customerId })\r\n      .sort({ date: -1 });\r\n    \r\n    res.json({ success: true, credits });\r\n  } catch (error) {\r\n    console.error('Error fetching credits:', error);\r\n    res.status(500).json({ success: false, message: 'Error fetching credits', error: error.message });\r\n  }\r\n});"],"mappings":"AAAAA,MAAM,CAACC,GAAG,CAAC,qBAAqB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACpD,IAAI;IACF,MAAM;MAAEC;IAAW,CAAC,GAAGF,GAAG,CAACG,MAAM;;IAEjC;IACA,IAAI,CAACD,UAAU,EAAE;MACf,OAAOD,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAA0B,CAAC,CAAC;IACrF;IAEA,MAAMC,MAAM,GAAG,MAAMC,KAAK,CAACC,IAAI,CAAC;MAAEC,QAAQ,EAAET;IAAW,CAAC,CAAC,CACtDU,IAAI,CAAC;MAAEC,IAAI,EAAE,CAAC;IAAE,CAAC,CAAC;IAErBZ,GAAG,CAACI,IAAI,CAAC;MAAEC,OAAO,EAAE,IAAI;MAAEE;IAAO,CAAC,CAAC;EACrC,CAAC,CAAC,OAAOM,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9Cb,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE,KAAK;MAAEC,OAAO,EAAE,uBAAuB;MAAEO,KAAK,EAAEA,KAAK,CAACP;IAAQ,CAAC,CAAC;EAClG;AACF,CAAC,CAAC;;AAEF;AACAT,MAAM,CAACC,GAAG,CAAC,sBAAsB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACrD,IAAI;IACF,MAAM;MAAEC;IAAW,CAAC,GAAGF,GAAG,CAACG,MAAM;;IAEjC;IACA,IAAI,CAACD,UAAU,EAAE;MACf,OAAOD,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAA0B,CAAC,CAAC;IACrF;IAEA,MAAMS,OAAO,GAAG,MAAMC,MAAM,CAACP,IAAI,CAAC;MAAEC,QAAQ,EAAET;IAAW,CAAC,CAAC,CACxDU,IAAI,CAAC;MAAEC,IAAI,EAAE,CAAC;IAAE,CAAC,CAAC;IAErBZ,GAAG,CAACI,IAAI,CAAC;MAAEC,OAAO,EAAE,IAAI;MAAEU;IAAQ,CAAC,CAAC;EACtC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/Cb,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE,KAAK;MAAEC,OAAO,EAAE,wBAAwB;MAAEO,KAAK,EAAEA,KAAK,CAACP;IAAQ,CAAC,CAAC;EACnG;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}